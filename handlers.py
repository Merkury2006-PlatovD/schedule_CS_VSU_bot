from datetime import datetime

import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import TeleBot
from parser import ScheduleParser
from utils import get_subgroup_keyboard, get_group_keyboard, get_course_keyboard, get_persistent_keyboard
from db_controller import DBController


def register_handlers(bot: TeleBot, sch_parser: ScheduleParser):
    def week_update():
        global week
        if week == 0:
            week = 1
        else:
            week = 0
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–∞ {week}", datetime.now())

    week = 0
    scheduler = BackgroundScheduler()
    scheduler.add_job(week_update, 'cron', day_of_week='sat', hour=18, minute=0)
    scheduler.start()

    def set_bot_commands_menu():
        bot.set_my_commands([
            telebot.types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            telebot.types.BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
            telebot.types.BotCommand("info", "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
            telebot.types.BotCommand("updateinfo", "–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ")
        ])

    @bot.message_handler(commands=['start'])
    def handle_start(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ user_exists(user_id). –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –±–æ—Ç–∞.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        set_bot_commands_menu()
        user_id = message.from_user.id

        if not DBController.user_exists(user_id):
            DBController.add_user(user_id)
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
        else:
            bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())

    @bot.message_handler(commands=['updateinfo'])
    def handle_profile_update(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/updateinfo" –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        user_id = message.from_user.id
        if not DBController.user_exists(user_id):
            DBController.add_user(user_id)
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())

    @bot.message_handler(commands=['help'])
    def handle_help(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/help" –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: \n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /updateinfo, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ.")

    @bot.message_handler(commands=['info'])
    def handle_help(message):
        user_id = message.from_user.id
        course, group, subgroup = DBController.get_user_data(user_id)
        bot.send_message(message.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ: \n"
                                               f"–¢–≤–æ–π –∫—É—Ä—Å: {course}\n"
                                               f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group}\n"
                                               f"–¢–≤–æ—è –ø–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}")

    @bot.message_handler(
        func=lambda message: message.text not in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                                  "üìÖ –°—É–±–±–æ—Ç–∞"])
    def handle_error_message(message):
        user_id = message.from_user.id
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    @bot.message_handler(
        func=lambda message: message.text in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                              "üìÖ –°—É–±–±–æ—Ç–∞"])
    def handle_schedule_request(message):
        days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4, "üìÖ –°—É–±–±–æ—Ç–∞": 5}
        user_id = message.from_user.id
        day = days_map[message.text]
        course, group, subgroup = DBController.get_user_data(user_id)
        schedule = sch_parser.get_lessons_on_day(sch_parser.find_required_col(course, group, subgroup),
                                                 day, week)
        out_data_formated = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {message.text.split(" ")[-1]}:*\n\n"

        for key, val in schedule.items():
            if val is None or val.strip() == "":
                val = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"

            out_data_formated += f"üïí *{key}*\nüìñ {val}\n\n"

        bot.send_message(user_id, out_data_formated, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
    def handle_course(call):
        user_id = call.from_user.id
        course = int(call.data.split("_")[1])

        DBController.update_user(user_id, "course", course)
        keyboard = get_group_keyboard()
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
    def handle_group(call):
        user_id = call.from_user.id
        group = int(call.data.split("_")[1])

        DBController.update_user(user_id, "group_num", group)
        keyboard = get_subgroup_keyboard()
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("subgroup_"))
    def handle_subgroup(call):
        user_id = call.from_user.id
        subgroup = int(call.data.split("_")[1])

        DBController.update_user(user_id, "subgroup", subgroup)
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())
