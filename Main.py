import os
import sqlite3
import time

from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types
import telebot
from datetime import datetime
from parser import ScheduleParser

bot = telebot.TeleBot(token=os.getenv("BOT_TOKEN"))

conn = sqlite3.connect('database/bot_data.sql', check_same_thread=False)
cursor = conn.cursor()
sch_parser = ScheduleParser('schedule.xlsx')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    course INTEGER,
    group_num INTEGER,
    subgroup INTEGER
);
""")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
conn.commit()


def user_exists(user_id):
    cursor.execute("SELECT EXISTS(SELECT 1 FROM users WHERE user_id=?)", (user_id,))
    return cursor.fetchone()[0]


def add_user(user_id):
    cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()


def update_user(user_id, column, value):
    cursor.execute(f"UPDATE users SET {column} = ? WHERE user_id = ?", (value, user_id))
    conn.commit()


def get_user_data(user_id):
    cursor.execute("SELECT course, group_num, subgroup FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id

    if not user_exists(user_id):
        add_user(user_id)
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
    else:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())


@bot.message_handler(commands=['updateinfo'])
def handle_profile_update(message):
    user_id = message.from_user.id
    if not user_exists(user_id):
        add_user(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())

@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: \n"
                                           "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                           "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /updateinfo, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                           "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ.")

@bot.message_handler(commands=['info'])
def handle_help(message):
    user_id = message.from_user.id
    course, group, subgroup = get_user_data(user_id)
    bot.send_message(message.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ: \n"
                                            f"–¢–≤–æ–π –∫—É—Ä—Å: {course}\n"
                                            f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group}\n"
                                            f"–¢–≤–æ—è –ø–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}")

@bot.message_handler(func=lambda message: message.text not in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞", "üìÖ –°—É–±–±–æ—Ç–∞"])
def handle_error_message(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@bot.message_handler(func=lambda message: message.text in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞", "üìÖ –°—É–±–±–æ—Ç–∞"])
def handle_schedule_request(message):
    days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4, "üìÖ –°—É–±–±–æ—Ç–∞": 5}
    user_id = message.from_user.id
    day = days_map[message.text]
    course, group, subgroup = get_user_data(user_id)
    schedule = sch_parser.get_lessons_on_day(sch_parser.find_required_col(course, group, subgroup),
                                             day, week)
    out_data_formated = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:*\n\n"

    for key, val in schedule.items():
        if val is None or val.strip() == "":
            val = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"

        out_data_formated += f"üïí *{key}*\nüìñ {val}\n\n"

    bot.send_message(user_id, out_data_formated, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
def handle_course(call):
    user_id = call.from_user.id
    course = int(call.data.split("_")[1])

    update_user(user_id, "course", course)
    keyboard = get_group_keyboard()
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
def handle_group(call):
    user_id = call.from_user.id
    group = int(call.data.split("_")[1])

    update_user(user_id, "group_num", group)
    keyboard = get_subgroup_keyboard()
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("subgroup_"))
def handle_subgroup(call):
    user_id = call.from_user.id
    subgroup = int(call.data.split("_")[1])

    update_user(user_id, "subgroup", subgroup)
    bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())


def get_persistent_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
        types.KeyboardButton("üìÖ –í—Ç–æ—Ä–Ω–∏–∫"),
        types.KeyboardButton("üìÖ –°—Ä–µ–¥–∞"),
        types.KeyboardButton("üìÖ –ß–µ—Ç–≤–µ—Ä–≥"),
        types.KeyboardButton("üìÖ –ü—è—Ç–Ω–∏—Ü–∞"),
        types.KeyboardButton("üìÖ –°—É–±–±–æ—Ç–∞")
    )
    return keyboard


def get_course_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for i in range(1, 5):
        keyboard.add(types.InlineKeyboardButton(text=str(i), callback_data=f"course_{i}"))
    return keyboard


def get_group_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for i in range(1, 18):
        keyboard.add(types.InlineKeyboardButton(text=str(i), callback_data=f"group_{i}"))
    return keyboard


def get_subgroup_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="1", callback_data="subgroup_1"))
    keyboard.add(types.InlineKeyboardButton(text="2", callback_data="subgroup_2"))
    return keyboard


def week_update():
    global week
    if week == 0:
        week = 1
    else:
        week = 0
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–∞ {week}", datetime.now())


week = 0
scheduler = BackgroundScheduler()
scheduler.add_job(week_update, 'cron', day_of_week='sat', hour=18, minute=0)
scheduler.start()


def main():
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)


if __name__ == "__main__":
    main()
